/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz_juego;

import javax.swing.JOptionPane;
import jr.parcial2.Baraja;

/**
 *
 * @author HP
 */
public class Jugada extends javax.swing.JFrame {
    
    Integer Ijuga[]; //PARA GUARDAR EL INDICE DE LOS JUGADORES A JUGAR
    double [][] jugadorValor;  //PARA GUARDAR LA CANTIDAD DE JUGADORES Y LOS VALORES DE LAS CARTAS DADAS
    String [][] jugadorCarta; //PARA GUARDAR CANTIDAD DE JUGADORES Y LA ESTRUCTURA DE CARTAS DADAS
    boolean verificar []; //PARA VERIFICAR SI EL JUGADOR SIGUE JUGANDO O YA PERDIÓ    
    int num = 0; //OBTENER LA PRIMERA LLAVE DE LA COLECCION CLON PARA ENTREGARLA AL JUGADOR    

    Baraja b = new Baraja();
    /**
     * Creates new form Jugada
     */
    public Jugada() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnConfirmar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSolicitar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        mostrarCartas = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        mostrarJugadores = new javax.swing.JTextArea();
        texto1 = new javax.swing.JLabel();
        texto2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));

        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Bienvenido, juego siete y media");

        jLabel2.setText("Ingrese la cantidad de jugadores");

        mostrarCartas.setColumns(20);
        mostrarCartas.setRows(5);
        mostrarCartas.setEnabled(false);
        jScrollPane1.setViewportView(mostrarCartas);

        mostrarJugadores.setColumns(20);
        mostrarJugadores.setRows(5);
        mostrarJugadores.setEnabled(false);
        jScrollPane2.setViewportView(mostrarJugadores);

        texto1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        texto2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        texto2.setText("Jugadores:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSolicitar, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)
                        .addComponent(btnConfirmar))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(texto1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(texto2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSolicitar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfirmar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(texto1)
                    .addComponent(texto2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
       try
       {
            String num1 = txtSolicitar.getText();
            int numeroso = Integer.parseInt(num1);
            if (numeroso > b.Cartas_Num)
            {
                JOptionPane.showConfirmDialog(rootPane,  "El máximo de jugadores permitidos es: " + b.Cartas_Num, "LIMITE", JOptionPane.DEFAULT_OPTION);
                txtSolicitar.setText("");
            }
            else
            {
                jugadores(numeroso);
                Ronda_Juego();
                btnConfirmar.setEnabled(false);
                txtSolicitar.setEditable(false);
            }
            
       } catch (Exception e)
       {
           txtSolicitar.setText("");
       }            
        
    }//GEN-LAST:event_btnConfirmarActionPerformed

    
    
    //------------------------------------------------------------
    
    //METODO PARA GUARDAR LA CANTIDAD DE JUGADORES QUE SE DESEE TENER EN EL JUEGO
    public void jugadores(int numjugadores)
    {
        // SE ESTABLECEN LOS PARAMETROS DE LOS VECTORES Y MATRICES CREADAS
        Ijuga = new Integer [numjugadores];
        jugadorValor = new double [numjugadores][100];
        jugadorCarta = new String [numjugadores][100];
        verificar = new boolean[numjugadores];

        for (int i = 0; i < numjugadores; i++)
        {
            Ijuga[i] = i + 1;    //SE ASIGNAN LOS INDICES DE LOS JUGADORES
            mostrarJugadores.append("Jugador " + Ijuga[i]);
            mostrarJugadores.append(System.getProperty("line.separator"));
            verificar[i] = true; // SE ESTABLECE QUE ESTÁN JUGANDO LOS JUGADORES
        }

    }


    //METODO PARA LLEVAR A ACABO LAS RONDAS O TURNOS DEL JUEGO
    public void Ronda_Juego()
    {
        b.Barajear();
        int perdedores = 0; //VARIABLE PARA CONTAR LAS PERSONAS QUE VAN PERDIENDO
        boolean terminar = true;        
        int cont[] = new int [Ijuga.length];  //VECTOR PARA SUMAR LAS COLUMNAS DE LA MATRIZ BIDIMENSIONAL
        int no; // VARIABLE CONTADORA EN CASO DE QUE TODOS LOS JUGADORES NO PIDAN CARTA        

        JOptionPane.showConfirmDialog(rootPane,  "Las primeras cartas han sido repartidas", "Repartición", JOptionPane.DEFAULT_OPTION);        
        for (int k = 0; k < Ijuga.length; k++)
        {
            jugadorCarta[(Ijuga[k] - 1)][cont[k]] = b.Dar_Carta();
            jugadorValor[(Ijuga[k] - 1)][cont[k]] = b.retornarValor();
            cont[k] = cont[k] + 1;

            double sumatoria = 0; //SE USARA PARA SUMAR LOS PUNTOS DE CADA JUGADOR

            //MUESTRA LAS CARTAS Y PUNTOS QUE TIENE CADA JUGADOR                       
            for (int j = 0; j < jugadorCarta[k].length; j++)
            {                     
                if (jugadorCarta[k][j] != null)
                {
                    sumatoria = sumatoria + jugadorValor[k][j];
                    mostrarCartas.append("Cartas del jugador " + Ijuga[k] + ":");
                    mostrarCartas.append(System.getProperty("line.separator"));
                    mostrarCartas.append(jugadorCarta[k][j] + " Valor de carta: " + jugadorValor[k][j]);
                    mostrarCartas.append(System.getProperty("line.separator"));
                }                    
            }
            mostrarCartas.append("Puntos totales del jugador " + Ijuga[k] + ": " + sumatoria);            
            mostrarCartas.append(System.getProperty("line.separator"));
            mostrarCartas.append("-----------------------------------------------------------------");            
            mostrarCartas.append(System.getProperty("line.separator"));
        }
        


        // CICLO DEL JUEGO HASTA QUE TERMINE
        while (terminar == true)
        {  
            no = perdedores; 

            // CICLO FOR PARA SIMULAR LAS RONDAS DEL JUEGO
            for (int i = 0; i < Ijuga.length; i++)
            {
                if (b.Dar_Carta() == null)
                {
                    JOptionPane.showConfirmDialog(rootPane, "Ya no quedan cartas para solicitar", "FIN", JOptionPane.DEFAULT_OPTION);
                    terminar = false;
                    ganadorForzado();
                    break;
                }
                else
                {
                    //CONDICION QUE VERIFICA SI LOS JUGADORES AUN JUEGAN O YA PERDIERON
                    if (verificar[(Ijuga[i] - 1)] == true)
                    {                           
                        int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea pedir una carta?", "Turno de Jugador: " + Ijuga[i], JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                        
                        if (respuesta == JOptionPane.YES_OPTION)
                        {
                            jugadorCarta[(Ijuga[i] - 1)][cont[i]] = b.Dar_Carta();
                            jugadorValor[(Ijuga[i] - 1)][cont[i]] = b.retornarValor();
                            cont[i] = cont[i] + 1;
                        }
                        else if (respuesta == JOptionPane.NO_OPTION)
                        {
                            JOptionPane.showConfirmDialog(rootPane, "El jugador " + Ijuga[i] + " no ha querido solicitar carta", "Carta", JOptionPane.DEFAULT_OPTION);                            
                            no = no + 1;
                        }
                        else if (respuesta == JOptionPane.CLOSED_OPTION)
                        {
                            JOptionPane.showConfirmDialog(rootPane, "El jugador " + Ijuga[i] + " no ha querido solicitar carta", "Carta", JOptionPane.DEFAULT_OPTION);
                            no = no + 1;
                        }                                                
                
                        double sumatoria = 0; //SE USARA PARA SUMAR LOS PUNTOS DE CADA JUGADOR

                        //MUESTRA LAS CARTAS Y PUNTOS QUE TIENE CADA JUGADOR
                        mostrarCartas.setText("");
                        texto1.setText("Cartas del jugador " + Ijuga[i] + ":");
                        for (int j = 0; j < jugadorCarta[i].length; j++)
                        {                     
                            if (jugadorCarta[i][j] != null)
                            {
                                sumatoria = sumatoria + jugadorValor[i][j];                        
                                mostrarCartas.append(jugadorCarta[i][j] + " Valor de carta: " + jugadorValor[i][j]);
                                mostrarCartas.append(System.getProperty("line.separator"));
                            }                    
                        }
                        mostrarCartas.append("Puntos totales del jugador " + Ijuga[i] + ": " + sumatoria);


                        //CONDICIONES PARA EL GANADOR 
                        if (sumatoria > 7.5)
                        {                               
                            JOptionPane.showConfirmDialog(rootPane, "El jugador " + Ijuga[i] + " Ha sobrepasado el límite, ha perdido", "JUGADOR PERDIO", JOptionPane.DEFAULT_OPTION);                            
                            verificar[(Ijuga[i] - 1)] = false;
                            perdedores = perdedores + 1;
                        }
                        else if(sumatoria == 7.5)
                        {
                            int sal = JOptionPane.showConfirmDialog(rootPane, "El jugador " + Ijuga[i] + " ¡HA GANADO, FELICITACIONES!", "EL JUEGO HA TERMINADO", JOptionPane.DEFAULT_OPTION);                            
                            if (sal == JOptionPane.OK_OPTION)
                            {
                                System.exit(0);
                            }
                            else if (sal == JOptionPane.CLOSED_OPTION)
                            {
                                System.exit(0);
                            }                                                        
                        }
                    }
                }
                
                
                //CONDICION SI LOS JUGADORES YA NO DESEAN JUGAR
                if (no == Ijuga.length)
                {      
                    if (perdedores == Ijuga.length)
                    {                    
                        terminar = false;
                        int salo = JOptionPane.showConfirmDialog(rootPane, "Nadie ha ganado", "EL JUEGO HA TERMINADO", JOptionPane.DEFAULT_OPTION);                            
                        if (salo == JOptionPane.OK_OPTION)
                        {
                            System.exit(0);
                        }
                        else if (salo == JOptionPane.CLOSED_OPTION)
                        {
                            System.exit(0);
                        }
   
                    }
                    else
                    {
                      terminar = false;
                      ganadorForzado();  
                    }                    
                }                               
            }
        }

    }


    //GANADOR EN CASO QUE SE ACABEN LAS CARTAS O QUE NADIE PIDA CARTA

    public void ganadorForzado()
    {
        double suma; //GUARDARA LA SUMA DE LOS PUNTOS
        double valorCima = 0; //GUARDARA LA SUMA DE PUNTOS MAS ALTA CERCANA A 7.5
        int primeraPosicion = 0; //GUARDARA EL INDICE DEL JUGADOR CON LA PUNTUACION MAS ALTA CERCANA A 7.5        

        // CICLO QUE COMPARA LA SUMA DE PUNTOS ENTRE TODOS LOS JUGADORES
        for (int i = 0; i < Ijuga.length; i++)
        {
            if (verificar[(Ijuga[i] - 1)] == true)
            {
                suma = 0;
                for (int j = 0; j < Ijuga.length; j++)
                {
                    suma = suma + jugadorValor[i][j];
                }    
                
                if (suma > valorCima)
                {
                    valorCima = suma;
                    primeraPosicion = (Ijuga[i] - 1);
                }
            }
        }

        int salir = JOptionPane.showConfirmDialog(rootPane, "El jugador " + Ijuga[primeraPosicion] + " ¡HA GANADO, FELICITACIONES!", "EL JUEGO HA TERMINADO", JOptionPane.DEFAULT_OPTION);
        if (salir == JOptionPane.OK_OPTION)
        {
            System.exit(0);
        }
        else if (salir == JOptionPane.CLOSED_OPTION)
        {
            System.exit(0);
        }
    }
    
    
    
    
    
    //-------------------------------------------------------------
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea mostrarCartas;
    private javax.swing.JTextArea mostrarJugadores;
    private javax.swing.JLabel texto1;
    private javax.swing.JLabel texto2;
    private javax.swing.JTextField txtSolicitar;
    // End of variables declaration//GEN-END:variables
}
